repeat wait() until game:IsLoaded() 
repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") ~= nil

function loadcheck()
    if isfile("SALUNA_OPA.json") then
        g = readfile("SALUNA_OPA.json")
            return g
        else
            writefile("SALUNA_OPA.json",game:GetService("HttpService"):JSONEncode(getgenv().Save))
        return
    end
end

getgenv().Save = {
    ["AutoSave"] = false,
    ["Auto Aura Finding"] = false,
    ["Auto Delete Common Box"] = false,
    ["Auto Delete Uncommon Box"] = false,
["Auto Open Common Box"] = false,
["Auto Open Uncommon Box"] = false,
["Auto Open Rare/Ultra Box"] = false,
["Auto Delete Non-Aura Common Fruit"] = false,
["Auto Delete Non-Aura Uncommon Fruit"] = false,
["Auto Delete Non-Aura Rare Fruit"] = false,
["Auto Delete Non-Aura Ultra Rare Fruit"] = false
}

function LoadSetting()
    if isfile("SALUNA_OPA.json") then
            vb = game:GetService("HttpService"):JSONDecode(readfile("SALUNA_OPA.json"))
            getgenv().Save = vb
                return vb
        else
            loadcheck()
        return
    end
end

function SaveSetting()
    if isfile("SALUNA_OPA.json") then
            f = writefile
            writefile("SALUNA_OPA.json",game:GetService("HttpService"):JSONEncode(getgenv().Save))
                return f
        else
            loadcheck()
        return
    end
end

function format_large_number_with_spaces(n)
    local str = tostring(n)
    local reversed = str:reverse()
    local formatted = reversed:gsub("(%d%d%d)", "%1 ")
    formatted = formatted:reverse()
    if formatted:sub(1, 1) == " " then
        formatted = formatted:sub(2)
    end
    return formatted
end

loadcheck()
LoadSetting()

local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
wait(1)
vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

if game.CoreGui:FindFirstChild("BBB") then
game.CoreGui:FindFirstChild("BBB"):Destroy()
end

if game.CoreGui:FindFirstChild("SalunaDeVoz") then
game.CoreGui:FindFirstChild("SalunaDeVoz"):Destroy()
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/PotatoEiii/whocares/main/thisdamn/SalunaKavoUI7"))()
local Window = Library.CreateLib("Saluna VIP | OPL: ARNACHY", "Serpent", colors)
local Stats = Window:NewTab("Stats")
local Dupe = Window:NewTab("Dupe")
local Backpack = Window:NewTab("Backpack")
local Server = Window:NewTab("Server")
local Settings = Window:NewTab("Settings")
local Stats1 = Stats:NewSection(" -- Statistics -- ")
local Dupe1 = Dupe:NewSection(" -- Aura Finding -- ")
local Backpack1 = Backpack:NewSection(" -- Auto Delete Box -- ")
local Backpack2 = Backpack:NewSection(" -- Auto Open Box -- ")
local Backpack3 = Backpack:NewSection(" -- Auto Delete Fruit -- ")
local Server1 = Server:NewSection("-- Server --")
local SettingsSection1 = Settings:NewSection(" -- Auto Save -- ")

local Realtimecheck = Stats1:NewLabel2("Real-Time \n"..os.date("%A %x %X (%Z)"))
local PlayerStat1 = Stats1:NewLabel2("Player Stats")
local PlayerStat2 = Stats1:NewLabel("Gems: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Gems.Value))
local PlayerStat3 = Stats1:NewLabel("Beri: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Cash.Value))
local PlayerStat4 = Stats1:NewLabel("Bounty: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Bounty.Value))
local PlayerStat5 = Stats1:NewLabel("Kills: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Kills.Value))
local PlayerStat6 = Stats1:NewLabel("Compass: "..tostring(game:GetService("Players").LocalPlayer.PlayerGui.Menu.Frame.C.Frame.A.Sam.SamTimer.Text))

Dupe1:NewToggle("Auto Aura Finding" , "Require A Lot Of Compass Tokens", function(state)
getgenv().Save["Auto Aura Finding"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack1:NewToggle("Auto Delete Common Box" , "Delete Common Box", function(state)
getgenv().Save["Auto Delete Common Box"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack1:NewToggle("Auto Delete Uncommon Box" , "Delete Uncommon Box", function(state)
getgenv().Save["Auto Delete Uncommon Box"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack2:NewToggle("Auto Open Common Box" , "Open Common Box", function(state)
getgenv().Save["Auto Open Common Box"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack2:NewToggle("Auto Open Uncommon Box" , "Open Uncommon Box", function(state)
getgenv().Save["Auto Open Uncommon Box"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack2:NewToggle("Auto Open Rare/Ultra Box" , "Open Rare/Ultra Box", function(state)
getgenv().Save["Auto Open Rare/Ultra Box"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack3:NewToggle("Auto Delete Non-Aura Common Fruit" , "Delete Common Fruits Which Have No Aura", function(state)
getgenv().Save["Auto Delete Non-Aura Common Fruit"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack3:NewToggle("Auto Delete Non-Aura Uncommon Fruit" , "Delete Uncommon Fruits Which Have No Aura", function(state)
getgenv().Save["Auto Delete Non-Aura Uncommon Fruit"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack3:NewToggle("Auto Delete Non-Aura Rare Fruit" , "Delete Rare Fruits Which Have No Aura", function(state)
getgenv().Save["Auto Delete Non-Aura Rare Fruit"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Backpack3:NewToggle("Auto Delete Non-Aura Ultra Rare Fruit" , "Delete Ultra Rare Fruits Which Have No Aura", function(state)
getgenv().Save["Auto Delete Non-Aura Ultra Rare Fruit"] = state
if getgenv().Save["AutoSave"] then
SaveSetting()
end
end)

Server1:NewButton("Rejoin Server", "Rejoin The Current Server", function()
game.Players.LocalPlayer:Kick("Rejoining Server, Please Wait...")
game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
end)

Server1:NewButton("Hop Server", "Hop To The Other Server", function()
TeleportService = game:GetService("TeleportService")
HttpService = game:GetService("HttpService")
PlaceId, JobId = game.PlaceId, game.JobId
httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
	if httprequest then
		httprequest({
			Url = 'http://127.0.0.1:6463/rpc?v=1',
			Method = 'POST',
			Headers = {
				['Content-Type'] = 'application/json',
				Origin = 'https://discord.com'
			},
			Body = HttpService:JSONEncode({
				cmd = 'INVITE_BROWSER',
				nonce = HttpService:GenerateGUID(false),
				args = {code = 'dYHag43eeU'}
			})
		})
	end   
 if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            game.Players.LocalPlayer:Kick("Hoping Server, Please Wait...")
            TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
        else
            return 
Fluent:Notify({
    Title = "Saluna Notify",
    Content = "Not Found Any Other Server",
    Duration = 5
})
        end
    end          
end)

SettingsSection1:NewToggle("Auto Save" , "Auto Save Config", function(state)
getgenv().Save["AutoSave"] = state
SaveSetting()
end)

spawn(function()
while wait(0.1) do
if getgenv().Save["Auto Delete Common Box"] then
for i,v in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if v:IsA("Tool") and v.Name == "Common Box" then
v:Destroy()
end
end
end

if getgenv().Save["Auto Delete Uncommon Box"] then
for i,v in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if v:IsA("Tool") and v.Name == "Uncommon Box" then
v:Destroy()
end
end
end

if getgenv().Save["Auto Open Common Box"] then
for i,v in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if v:IsA("Tool") and v.Name == "Common Box" then
v.Parent = game.Players.LocalPlayer.Character
v:Activate()
end
end
end

if getgenv().Save["Auto Open Uncommon Box"] then
for i,v in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if v:IsA("Tool") and v.Name == "Uncommon Box" then
v.Parent = game.Players.LocalPlayer.Character
v:Activate()
end
end
end

if getgenv().Save["Auto Open Rare/Ultra Box"] then
for i,v in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if v:IsA("Tool") and string.find(v.Name,"Rare") then
v.Parent = game.Players.LocalPlayer.Character
v:Activate()
end
end
end

if getgenv().Save["Auto Delete Non-Aura Ultra Rare Fruit"] then
for i,y in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if string.find(y.Name, "Quake") or string.find(y.Name, "Phoenix") or string.find(y.Name, "Dark") or string.find(y.Name, "Vampire") then
if not string.sub(y:WaitForChild("Data").Value,tonumber(string.len(y:WaitForChild("Data").Value)) - 1) ~= ",1" then
y:Destroy()
end
end
end
end

if getgenv().Save["Auto Delete Non-Aura Rare Fruit"] then
for i,y in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if string.find(y.Name, "Gravity") or string.find(y.Name, "Ope") or string.find(y.Name, "Venom") or string.find(y.Name, "Candy Fruit") or string.find(y.Name, "Hollow") or string.find(y.Name, "Chilly") or string.find(y.Name, "Gas") or string.find(y.Name, "Flare") or string.find(y.Name, "Light") or string.find(y.Name, "Smoke") or string.find(y.Name, "Rumble") or string.find(y.Name, "Sand") or string.find(y.Name, "Magma") or string.find(y.Name, "Snow") or string.find(y.Name, "Plasma") then
if not string.sub(y:WaitForChild("Data").Value,tonumber(string.len(y:WaitForChild("Data").Value)) - 1) ~= ",1" then
y:Destroy()
end
end
end
end

if getgenv().Save["Auto Delete Non-Aura Uncommon Fruit"] then
for i,y in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if string.find(y.Name, "Order") or string.find(y.Name, "Alice") or string.find(y.Name, "Gum") or string.find(y.Name, "Love") or string.find(y.Name, "Bomb") or string.find(y.Name, "Smelt") or string.find(y.Name, "Diamond") or string.find(y.Name, "Barrier") or string.find(y.Name, "String") or string.find(y.Name, "Hobby") then
if not string.sub(y:WaitForChild("Data").Value,tonumber(string.len(y:WaitForChild("Data").Value)) - 1) ~= ",1" then
y:Destroy()
end
end
end
end

if getgenv().Save["Auto Delete Non-Aura Common Fruit"] then
for i,y in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if string.find(y.Name, "Slip") or string.find(y.Name, "Chop") or string.find(y.Name, "Clone") or string.find(y.Name, "Hot") or string.find(y.Name, "Clear") or string.find(y.Name, "Spring") or string.find(y.Name, "Swim") or string.find(y.Name, "Spin") or string.find(y.Name, "Luck") or string.find(y.Name, "Float") then
if not string.sub(y:WaitForChild("Data").Value,tonumber(string.len(y:WaitForChild("Data").Value)) - 1) ~= ",1" then
y:Destroy()
end
end
end
end
end
end)




spawn(function()
while wait(0.1) do
if getgenv().Save["Auto Aura Finding"] then
repeat wait() until game:IsLoaded() 
repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") ~= nil
game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].UpdateClothing_Extras:FireServer("A","\255",34)
wait(1)
repeat
if game.Players.LocalPlayer.PlayerGui.Load.Frame.Visible == true and getgenv().Save["Auto Aura Finding"] then
repeat
for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Load.MouseButton1Click)) do
v:Fire()
end
wait(2)
until game.Players.LocalPlayer.PlayerGui.Load.Frame.Visible == false or not getgenv().Save["Auto Aura Finding"]
end
if not game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild("Compass") and not game.Players.LocalPlayer.Character:FindFirstChild("Compass") and getgenv().Save["Auto Aura Finding"] then
workspace.Merchants.QuestMerchant.Clickable.Retum:FireServer("Claim10")
end
if game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild("Compass") and getgenv().Save["Auto Aura Finding"] then
game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer:WaitForChild("Backpack")["Compass"])
end
for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
if v.Name == "Compass" and getgenv().Save["Auto Aura Finding"] then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Poser.Value)
end
if game.Players.LocalPlayer.Character:FindFirstChild("Compass") and getgenv().Save["Auto Aura Finding"] then
game.Players.LocalPlayer.Character.Compass:Activate()
end
end
task.wait(0.5)
until not getgenv().Save["Auto Aura Finding"]
end
end
end)

spawn(function()
while wait(0.1) do
if getgenv().Save["Auto Aura Finding"] then
for i,v in pairs(game.Players.LocalPlayer:WaitForChild("Backpack"):GetChildren()) do
if not string.find(v.Name,"Fruit") and not string.find(v.Name,"Compass") and not string.find(v.Name,"Box") then
v:Destroy()
end
end
end
end
end)

spawn(function()
while wait(0.1) do
Realtimecheck:UpdateLabel2("Real-Time \n"..os.date("%A %x %X (%Z)"))
PlayerStat2:UpdateLabel("Gems: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Gems.Value))
PlayerStat3:UpdateLabel("Beri: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Cash.Value))
PlayerStat4:UpdateLabel("Bounty: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Bounty.Value))
PlayerStat5:UpdateLabel("Kills: "..format_large_number_with_spaces(workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.Kills.Value))
if game:GetService("Players").LocalPlayer.PlayerGui.Menu.Frame.C.Frame.A.Sam.SamTimer.Text ~= "Ready!" then
PlayerStat6:UpdateLabel("Compass: "..tostring(game:GetService("Players").LocalPlayer.PlayerGui.Menu.Frame.C.Frame.A.Sam.SamTimer.Text))
else
PlayerStat6:UpdateLabel("Compass: "..tostring(game.Workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.CompassTokens.Value).."/"..tostring(game.Workspace.UserData["User_"..game.Players.LocalPlayer.UserId].Data.CompassTokenLimit.Value).." (Full!)")
end
end
end)
