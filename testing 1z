Rarefruit = {
"Candy Fruit",
"Chilly Fruit",
"Flare Fruit",
"Gas Fruit",
"Gravity Fruit",
"Hollow Fruit",
"Light Fruit",
"Magma Fruit",
"Ope Fruit",
"Plasma Fruit",
"Rumble Fruit",
"Sand Fruit",
"Smoke Fruit",
"Snow Fruit",
"Venom Fruit",
"Dark Fruit",
"Phoenix Fruit",
"Quake Fruit",
"Vampire Fruit"
}

function storedf()
if game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF1Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF1.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF1.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF1"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF2Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF2.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF2.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF2"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF3Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF3.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF3.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF3"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF4Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF4.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF4.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF4"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF5Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF5.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF5.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF5"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF6Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF6.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF6.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF6"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF7Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF7.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF7.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF7"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF8Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF8.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF8.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF8"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF9Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF9.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF9.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF9"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF10Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF10.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF10.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF10"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF11Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF11.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF11.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF11"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
elseif game.Workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12Unlocked.Value == true and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value == "None" and game:GetService("Players").LocalPlayer.PlayerGui.Storage.Frame.StoredDF12.Button.Text == "Store" then
                local args = {
                    [1] = "StoredDF12"
                }
                
                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer(unpack(args))
end
end

spawn(function()
while wait(0.3) do
repeat wait() until _G.storeffrt == true
pcall(function()
repeat task.wait()
for i, t in pairs(Rarefruit) do
for i, u in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
if u.Name == t then
game.Players.LocalPlayer.Character.Humanoid:EquipTool(u)
task.wait()
storedf()
end
end
end
storedf()
until not _G.storeffrt
end)
end
end)

spawn(function()
while wait(0.3) do
repeat wait() until _G.aurasto == true
pcall(function()
repeat task.wait()
for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
if string.find(v.Name,"Fruit") and string.sub(v.Data.Value,tonumber(string.len(v.Data.Value)) - 1) == ",1" then
game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
task.wait()
storedf()
end
end
task.wait()
storedf()
until not _G.aurasto
end)
end
end)

_G.aurasto = true
_G.storeffrt = true

spawn(function()
    while wait(0.3) do
        pcall(function()
            local playerData = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data
            local initialFruitData = playerData.StoredDF1.Value

            repeat 
                wait(0.5) 
            until playerData.StoredDF1.Value ~= initialFruitData and playerData.StoredDF1.Value ~= "None"

            local newFruitData = playerData.StoredDF1.Value
            local fruitParts = {}
            for part in string.gmatch(newFruitData, "[^,]+") do
                local trimmedPart = part:match("^%s*(.-)%s*$")
                table.insert(fruitParts, trimmedPart)
            end

            local fruitAuraStatus = fruitParts[6] == "1" and "(Aura Fruit!!!)" or "(Normal Fruit)"

            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = "Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 1 \nFruit: " .. fruitParts[1] .. " " .. fruitAuraStatus ..
                                          "\nAffinity: :point_down: \nDef: " .. fruitParts[2] ..
                                          " ; Melee: " .. fruitParts[3] ..
                                          " ; Snip: " .. fruitParts[4] ..
                                          " ; Sword: " .. fruitParts[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }

            local jsonData = game:GetService("HttpService"):JSONEncode(data)
            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = url, Body = jsonData, Method = "POST", Headers = headers})
            else
                warn("HTTP request function not found!")
            end
        end)
    end
end)

spawn(function()
    while wait(0.3) do
        pcall(function()
            local playerData = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data
            local initialFruitData = playerData.StoredDF2.Value

            repeat 
                wait(0.5) 
            until playerData.StoredDF2.Value ~= initialFruitData and playerData.StoredDF2.Value ~= "None"

            local newFruitData = playerData.StoredDF2.Value
            local fruitParts = {}
            for part in string.gmatch(newFruitData, "[^,]+") do
                local trimmedPart = part:match("^%s*(.-)%s*$")
                table.insert(fruitParts, trimmedPart)
            end

            local fruitAuraStatus = fruitParts[6] == "1" and "(Aura Fruit!!!)" or "(Normal Fruit)"

            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = "Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 2 \nFruit: " .. fruitParts[1] .. " " .. fruitAuraStatus ..
                                          "\nAffinity: :point_down:  \nDef: " .. fruitParts[2] ..
                                          " ; Melee: " .. fruitParts[3] ..
                                          " ; Snip: " .. fruitParts[4] ..
                                          " ; Sword: " .. fruitParts[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }

            local jsonData = game:GetService("HttpService"):JSONEncode(data)
            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = url, Body = jsonData, Method = "POST", Headers = headers})
            end
        end)
    end
end)

spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF3
    
    while wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata3 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat wait(0.5) until userDataPath.Value ~= _G.fruitdata3 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatac = userDataPath.Value
            local fruitparts3 = {}
            
            for part3 in string.gmatch(fruitdatac, "[^,]+") do
                local trimmed3 = part3:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts3, trimmed3)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts3[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 3 \nFruit: " .. fruitparts3[1] ..
                                  " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts3[2] ..
                                  "; Melee: " .. fruitparts3[3] ..
                                  "; Snip: " .. fruitparts3[4] ..
                                  "; Sword: " .. fruitparts3[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = url, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF4
    
    while wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata4 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat wait(0.5) until userDataPath.Value ~= _G.fruitdata4 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatav = userDataPath.Value
            local fruitparts4 = {}
            
            for part4 in string.gmatch(fruitdatav, "[^,]+") do
                local trimmed4 = part4:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts4, trimmed4)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts4[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 4 \nFruit: " .. fruitparts4[1] ..
                                  " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts4[2] ..
                                  "; Melee: " .. fruitparts4[3] ..
                                  "; Snip: " .. fruitparts4[4] ..
                                  "; Sword: " .. fruitparts4[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = url, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF5
    
    while wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata5 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat wait(0.5) until userDataPath.Value ~= _G.fruitdata5 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatab = userDataPath.Value
            local fruitparts5 = {}
            
            for part5 in string.gmatch(fruitdatab, "[^,]+") do
                local trimmed5 = part5:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts5, trimmed5)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts5[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 5 \nFruit: " .. fruitparts5[1] ..
                                  " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts5[2] ..
                                  "; Melee: " .. fruitparts5[3] ..
                                  "; Snip: " .. fruitparts5[4] ..
                                  "; Sword: " .. fruitparts5[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = url, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF6
    
    while wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata6 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat wait(0.5) until userDataPath.Value ~= _G.fruitdata6 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatan = userDataPath.Value
            local fruitparts6 = {}
            
            for part6 in string.gmatch(fruitdatan, "[^,]+") do
                local trimmed6 = part6:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts6, trimmed6)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts6[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 6 \nFruit: " .. fruitparts6[1] .. 
                                  " " .. _G.fruitauraistrue .. 
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts6[2] ..
                                  "; Melee: " .. fruitparts6[3] ..
                                  "; Snip: " .. fruitparts6[4] ..
                                  "; Sword: " .. fruitparts6[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = url, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

spawn(function()
    local userId = tostring(game.Players.LocalPlayer.UserId)
    local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF7
    
    while wait(0.3) do
        local success, err = pcall(function()
            -- Store initial fruit data
            _G.fruitdata7 = userDataPath.Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat wait(0.5) until userDataPath.Value ~= _G.fruitdata7 and userDataPath.Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdatam = userDataPath.Value
            local fruitparts7 = {}
            
            for part7 in string.gmatch(fruitdatam, "[^,]+") do
                local trimmed7 = part7:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts7, trimmed7)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts7[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                  "\nGameID: " .. game.PlaceId ..
                                  "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 7 \nFruit: " .. fruitparts7[1] .. 
                                  " " .. _G.fruitauraistrue .. 
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts7[2] ..
                                  "; Melee: " .. fruitparts7[3] ..
                                  "; Snip: " .. fruitparts7[4] ..
                                  "; Sword: " .. fruitparts7[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                local response = requestFunction({Url = url, Body = newdata, Method = "POST", Headers = headers})
                if response.StatusCode ~= 200 then
                    warn("Failed to send data: " .. response.StatusMessage)
                end
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error in script: " .. err)
        end
    end
end)

spawn(function()
    while wait(0.3) do
        local success, errorMsg = pcall(function()
            -- Store initial fruit data
            local userId = tostring(game.Players.LocalPlayer.UserId)
            local fruitDataKey = "StoredDF8"
            _G.fruitdata8 = workspace.UserData["User_" .. userId].Data[fruitDataKey].Value
            
            -- Wait until the fruit data changes and is not "None"
            repeat wait(0.5) until workspace.UserData["User_" .. userId].Data[fruitDataKey].Value ~= _G.fruitdata8 
                and workspace.UserData["User_" .. userId].Data[fruitDataKey].Value ~= "None"
            
            -- Retrieve updated fruit data
            local fruitdataa = workspace.UserData["User_" .. userId].Data[fruitDataKey].Value
            local fruitparts8 = {}
            for part8 in string.gmatch(fruitdataa, "[^,]+") do
                local trimmed8 = part8:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts8, trimmed8)  -- Add the trimmed part to the table
            end
            
            -- Determine if the fruit has an aura
            _G.fruitauraistrue = (fruitparts8[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name .. 
                                  "\nGameID: " .. game.PlaceId .. 
                                  "\nJobID: " .. game.JobId .. 
                                  "\n============================================ \nStored DF Slot: 8 \nFruit: " .. fruitparts8[1] .. 
                                  " " .. _G.fruitauraistrue .. 
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts8[2] .. 
                                  "; Melee: " .. fruitparts8[3] .. 
                                  "; Snip: " .. fruitparts8[4] .. 
                                  "; Sword: " .. fruitparts8[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            -- Send the HTTP request
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = url, Body = newdata, Method = "POST", Headers = headers})
            else
                warn("HTTP request function not available")
            end
        end)
        
        if not success then
            warn("Error occurred in script: " .. errorMsg)
        end
    end
end)

spawn(function()
    while wait(0.3) do
        pcall(function()
            -- Store the initial value
            local userId = tostring(game.Players.LocalPlayer.UserId)
            local userDataPath = workspace.UserData["User_" .. userId].Data.StoredDF9
            _G.fruitdata9 = userDataPath.Value
            
            -- Wait for the value to change and ensure it's not "None"
            repeat wait(0.5) until userDataPath.Value ~= _G.fruitdata9 and userDataPath.Value ~= "None"
            
            -- Retrieve the updated value
            local fruitdataa = userDataPath.Value
            local fruitparts9 = {}
            
            for part9 in string.gmatch(fruitdataa, "[^,]+") do
                table.insert(fruitparts9, part9:match("^%s*(.-)%s*$")) -- Trim spaces
            end
            
            -- Check for Aura Fruit
            _G.fruitauraistrue = (fruitparts9[6] == "1") and "(Aura Fruit!!!)" or "(Normal Fruit)"
            
            -- Prepare data for Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                content = "",
                embeds = {{
                    title = "Saluna Notify",
                    description = "\nUsername: " .. game.Players.LocalPlayer.Name .. "\nGameID: " .. game.PlaceId .. "\nJobID: " .. game.JobId ..
                                  "\n============================================ \nStored DF Slot: 9 \nFruit: " .. fruitparts9[1] .. " " .. _G.fruitauraistrue ..
                                  "\nAffinity: :point_down:  \nDef: " .. fruitparts9[2] .. "; Melee: " .. fruitparts9[3] .. "; Snip: " .. fruitparts9[4] .. "; Sword: " .. fruitparts9[5],
                    type = "rich",
                    color = tonumber(0x00FF7F)
                }}
            }
            
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            local headers = { ["content-type"] = "application/json" }
            
            local requestFunction = http_request or request or HttpPost or syn.request
            if requestFunction then
                requestFunction({Url = url, Body = newdata, Method = "POST", Headers = headers})
            else
                warn("HTTP request function not available")
            end
        end)
    end
end)

spawn(function()
    while wait(0.3) do
        pcall(function()
            -- Fetching initial data
            local playerId = tostring(game.Players.LocalPlayer.UserId)
            local key = "StoredDF10"
            _G.fruitdata10 = workspace.UserData["User_" .. playerId].Data[key].Value

            -- Waiting for the value to change
            repeat wait(0.5) until workspace.UserData["User_" .. playerId].Data[key].Value ~= _G.fruitdata10 and workspace.UserData["User_" .. playerId].Data[key].Value ~= "None"

            -- Process the new data
            local fruitdata10 = workspace.UserData["User_" .. playerId].Data[key].Value
            local fruitparts10 = {}
            for part10 in string.gmatch(fruitdata10, "[^,]+") do
                local trimmed10 = part10:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts10, trimmed10)  -- Add the trimmed part to the table
            end

            -- Determine if it's an Aura Fruit or Normal Fruit
            if fruitparts10[6] == "1" then
                _G.fruitauraistrue = "(Aura Fruit!!!)"
            else
                _G.fruitauraistrue = "(Normal Fruit)"
            end

            -- Sending notification to Discord webhook
            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = " Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 10 \nFruit: " .. fruitparts10[1] .. " " .. _G.fruitauraistrue ..
                                          "\nAffinity: :point_down:  \nDef: " .. fruitparts10[2] ..
                                          " ; Melee: " .. fruitparts10[3] ..
                                          " ; Snip: " .. fruitparts10[4] ..
                                          " ; Sword: " .. fruitparts10[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)

            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
            requestFunction(abcdef)
        end)
    end
end)


spawn(function()
    while wait(0.3) do
        pcall(function()
            local playerId = tostring(game.Players.LocalPlayer.UserId)
            local key = "StoredDF11"
            _G.fruitdata11 = workspace.UserData["User_"..playerId].Data[key].Value
            
            repeat wait(0.5) until workspace.UserData["User_"..playerId].Data[key].Value ~= _G.fruitdata11 and workspace.UserData["User_"..playerId].Data[key].Value ~= "None"
            
            local fruitdata11 = workspace.UserData["User_"..playerId].Data[key].Value
            local fruitparts11 = {}
            
            for part11 in string.gmatch(fruitdata11, "[^,]+") do
                local trimmed11 = part11:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts11, trimmed11)  -- Add the trimmed part to the table
            end

            if fruitparts11[6] == "1" then
                _G.fruitauraistrue = "(Aura Fruit!!!)"
            else
                _G.fruitauraistrue = "(Normal Fruit)"
            end

            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = " Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 11 \nFruit: " .. fruitparts11[1] .. " " .. _G.fruitauraistrue ..
                                          "\nAffinity: :point_down:  \nDef: "..fruitparts11[2] ..
                                          " ; Melee: " .. fruitparts11[3] ..
                                          " ; Snip: " .. fruitparts11[4] ..
                                          " ; Sword: " .. fruitparts11[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)
            
            local headers = {
                ["content-type"] = "application/json"
            }
            local requestFunction = http_request or request or HttpPost or syn.request
            local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
            requestFunction(abcdef)
        end)
    end
end)

spawn(function()
    while wait(0.3) do
        pcall(function()
            _G.fruitdata12 = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value
            repeat wait(0.5) until workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value ~= _G.fruitdata12 and workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value ~= "None"
            local fruitdataa = workspace.UserData["User_"..tostring(game.Players.LocalPlayer.UserId)].Data.StoredDF12.Value
            local fruitparts12 = {}
            for part12 in string.gmatch(fruitdataa, "[^,]+") do
                local trimmed12 = part12:match("^%s*(.-)%s*$")  -- Trim spaces
                table.insert(fruitparts12, trimmed12)  -- Add the trimmed part to the table
            end

            if fruitparts12[6] == "1" then
                _G.fruitauraistrue = "(Aura Fruit!!!)"
            else
                _G.fruitauraistrue = "(Normal Fruit)"
            end

            local url = "https://discord.com/api/webhooks/1271382277649207326/L_h91B7SwkWtPyCOldaTkPzv1CibW8jNVg9-aVOzqBEY8fj1qzHREvwwc_N3Hwm3JsLz"
            local data = {
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = " Saluna Notify",
                        ["description"] = "\nUsername: " .. game.Players.LocalPlayer.Name ..
                                          "\nGameID: " .. game.PlaceId ..
                                          "\nJobID: " .. game.JobId ..
                                          "\n============================================ \nStored DF Slot: 12 \nFruit: " .. fruitparts12[1] .. " " .. _G.fruitauraistrue ..
                                          "\nAffinity: :point_down:  \nDef: " .. fruitparts12[2] ..
                                          " ; Melee: " .. fruitparts12[3] ..
                                          " ; Snip: " .. fruitparts12[4] ..
                                          " ; Sword: " .. fruitparts12[5],
                        ["type"] = "rich",
                        ["color"] = tonumber(0x00FF7F)
                    }
                }
            }
            local newdata = game:GetService("HttpService"):JSONEncode(data)

            local headers = {
                ["content-type"] = "application/json"
            }
            request = http_request or request or HttpPost or syn.request
            local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
            request(abcdef)
        end)
    end
end)
